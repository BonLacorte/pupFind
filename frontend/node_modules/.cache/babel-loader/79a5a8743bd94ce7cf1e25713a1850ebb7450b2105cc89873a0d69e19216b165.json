{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst cartAdapter = createEntityAdapter({});\nconst initialState = cartAdapter.getInitialState();\nexport const cartApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getCart: builder.query({\n      query: () => '/admin/cart',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedCarts = responseData.map(cart => {\n          cart.id = cart._id;\n          return cart;\n        });\n        return cartAdapter.setAll(initialState, loadedCarts);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Cart',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Cart',\n            id\n          }))];\n        } else return [{\n          type: 'Cart',\n          id: 'LIST'\n        }];\n      }\n    }),\n    getUserCart: builder.query({\n      query: userId => `/cart/${userId}`,\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        if (Array.isArray(responseData)) {\n          const loadedCarts = responseData.map(cart => {\n            cart.id = cart._id;\n            return cart;\n          });\n          return cartAdapter.setAll(initialState, loadedCarts);\n        } else {\n          return initialState; // Return the initial state if responseData is not an array\n        }\n      },\n\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Cart',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Cart',\n            id\n          }))];\n        } else return [{\n          type: 'Cart',\n          id: 'LIST'\n        }];\n      }\n    }),\n    // addNewCart: builder.mutation({\n    //     query: initialCart => ({\n    //         url: '/cart',\n    //         method: 'POST',\n    //         body: {\n    //             ...initialCart,\n    //         }\n    //     }),\n    //     invalidatesTags: [\n    //         { type: 'Cart', id: \"LIST\" }\n    //     ]\n    // }),\n    addNewCartProduct: builder.mutation({\n      query: initialCart => ({\n        url: '/cart',\n        method: 'POST',\n        body: {\n          ...initialCart\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Cart',\n        id: \"LIST\"\n      }]\n    }),\n    updateCart: builder.mutation({\n      query: initialCart => ({\n        url: `/cart/${initialCart.id}`,\n        method: 'PATCH',\n        body: {\n          ...initialCart\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Cart',\n        id: arg.id\n      }]\n    }),\n    // deleteCart: builder.mutation({\n    //     query: ({ id }) => ({\n    //         url: `/cart/${id}`,\n    //         method: 'DELETE',\n    //         body: { id }\n    //     }),\n    //     invalidatesTags: (result, error, arg) => [\n    //         { type: 'Cart', id: arg.id }\n    //     ]\n    // }),\n    deleteCartProduct: builder.mutation({\n      query: initialCart => ({\n        url: `/cart/${initialCart.id}`,\n        method: 'DELETE',\n        body: {\n          ...initialCart\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Cart',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetCartQuery,\n  useGetUserCartQuery,\n  // useAddNewCartMutation,\n  useAddNewCartProductMutation,\n  useUpdateCartMutation,\n  // useDeleteCartMutation,\n  useDeleteCartProductMutation\n} = cartApiSlice;\n\n// returns the query result object\nexport const selectCartsResult = cartApiSlice.endpoints.getCart.select();\n\n// creates memoized selector\nconst selectCartsData = createSelector(selectCartsResult, cartsResult => cartsResult.data // normalized state object with ids & entities\n);\n\nconst selectUserCartData = createSelector(userCartResult => userCartResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllCarts,\n  selectById: selectCartById,\n  selectIds: selectCartIds\n  // Pass in a selector that returns the carts slice of state\n} = cartAdapter.getSelectors(state => {\n  var _selectCartsData;\n  return (_selectCartsData = selectCartsData(state)) !== null && _selectCartsData !== void 0 ? _selectCartsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","cartAdapter","initialState","getInitialState","cartApiSlice","injectEndpoints","endpoints","builder","getCart","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedCarts","map","cart","id","_id","setAll","providesTags","error","arg","ids","type","getUserCart","userId","Array","isArray","addNewCartProduct","mutation","initialCart","url","method","body","invalidatesTags","updateCart","deleteCartProduct","useGetCartQuery","useGetUserCartQuery","useAddNewCartProductMutation","useUpdateCartMutation","useDeleteCartProductMutation","selectCartsResult","select","selectCartsData","cartsResult","data","selectUserCartData","userCartResult","selectAll","selectAllCarts","selectById","selectCartById","selectIds","selectCartIds","getSelectors","state","_selectCartsData"],"sources":["E:/Coding/WEB-DEV/Projects2/pupFind-mern/frontend/src/features/cart/cartApiSlice.js"],"sourcesContent":["import {\r\n    createSelector,\r\n    createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\nconst cartAdapter = createEntityAdapter({})\r\n\r\nconst initialState = cartAdapter.getInitialState()\r\n\r\n\r\nexport const cartApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getCart: builder.query({\r\n            query: () => '/admin/cart',\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            transformResponse: responseData => {\r\n                const loadedCarts = responseData.map(cart => {\r\n                    cart.id = cart._id\r\n                    return cart\r\n                });\r\n                return cartAdapter.setAll(initialState, loadedCarts)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Cart', id: 'LIST' },\r\n                        ...result.ids.map(id => ({ type: 'Cart', id }))\r\n                    ]\r\n                } else return [{ type: 'Cart', id: 'LIST' }]\r\n            }\r\n        }),\r\n        getUserCart: builder.query({\r\n            query: userId => `/cart/${userId}`,\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            transformResponse: responseData => {\r\n                if (Array.isArray(responseData)) {\r\n                    const loadedCarts = responseData.map(cart => {\r\n                        cart.id = cart._id;\r\n                        return cart;\r\n                    });\r\n                    return cartAdapter.setAll(initialState, loadedCarts);\r\n                } else {\r\n                    return initialState; // Return the initial state if responseData is not an array\r\n                }\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Cart', id: 'LIST' },\r\n                        ...result.ids.map((id) => ({ type: 'Cart', id }))\r\n                    ]\r\n                } else return [{ type: 'Cart', id: 'LIST' }]\r\n            }\r\n        }),\r\n        // addNewCart: builder.mutation({\r\n        //     query: initialCart => ({\r\n        //         url: '/cart',\r\n        //         method: 'POST',\r\n        //         body: {\r\n        //             ...initialCart,\r\n        //         }\r\n        //     }),\r\n        //     invalidatesTags: [\r\n        //         { type: 'Cart', id: \"LIST\" }\r\n        //     ]\r\n        // }),\r\n        addNewCartProduct: builder.mutation({\r\n            query: initialCart => ({\r\n                url: '/cart',\r\n                method: 'POST',\r\n                body: {\r\n                    ...initialCart,\r\n                }\r\n            }),\r\n            invalidatesTags: [\r\n                { type: 'Cart', id: \"LIST\" }\r\n            ]\r\n        }),\r\n        updateCart: builder.mutation({\r\n            query: initialCart => ({\r\n                url: `/cart/${initialCart.id}`,\r\n                method: 'PATCH',\r\n                body: {\r\n                    ...initialCart,\r\n                }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'Cart', id: arg.id }\r\n            ]\r\n        }),\r\n        // deleteCart: builder.mutation({\r\n        //     query: ({ id }) => ({\r\n        //         url: `/cart/${id}`,\r\n        //         method: 'DELETE',\r\n        //         body: { id }\r\n        //     }),\r\n        //     invalidatesTags: (result, error, arg) => [\r\n        //         { type: 'Cart', id: arg.id }\r\n        //     ]\r\n        // }),\r\n        deleteCartProduct: builder.mutation({\r\n            query: initialCart => ({\r\n                url: `/cart/${initialCart.id}`,\r\n                method: 'DELETE',\r\n                body: { ...initialCart }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'Cart', id: arg.id }\r\n            ]\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useGetCartQuery,\r\n    useGetUserCartQuery,\r\n    // useAddNewCartMutation,\r\n    useAddNewCartProductMutation,\r\n    useUpdateCartMutation,\r\n    // useDeleteCartMutation,\r\n    useDeleteCartProductMutation,\r\n} = cartApiSlice\r\n\r\n// returns the query result object\r\nexport const selectCartsResult = cartApiSlice.endpoints.getCart.select()\r\n\r\n// creates memoized selector\r\nconst selectCartsData = createSelector(\r\n    selectCartsResult,\r\n    cartsResult => cartsResult.data // normalized state object with ids & entities\r\n)\r\nconst selectUserCartData = createSelector(\r\n    userCartResult => userCartResult.data // normalized state object with ids & entities\r\n)\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n    selectAll: selectAllCarts,\r\n    selectById: selectCartById,\r\n    selectIds: selectCartIds\r\n    // Pass in a selector that returns the carts slice of state\r\n} = cartAdapter.getSelectors(state => selectCartsData(state) ?? initialState)\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}