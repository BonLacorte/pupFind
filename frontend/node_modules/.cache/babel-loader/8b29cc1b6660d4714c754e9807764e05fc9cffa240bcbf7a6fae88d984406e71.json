{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst productsAdapter = createEntityAdapter({});\nconst initialState = productsAdapter.getInitialState();\nexport const productsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getProducts: builder.query({\n      query: () => '/products',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedProducts = responseData.map(product => {\n          product.id = product._id;\n          return product;\n        });\n        return productsAdapter.setAll(initialState, loadedProducts);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Product',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Product',\n            id\n          }))];\n        } else return [{\n          type: 'Product',\n          id: 'LIST'\n        }];\n      }\n    }),\n    getCategoryProducts: builder.query({\n      query: category => `/products?category=${category}`,\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedProducts = responseData.map(product => {\n          product.id = product._id;\n          return product;\n        });\n        return productsAdapter.setAll(initialState, loadedProducts);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Product',\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: 'Product',\n            id\n          }))];\n        } else return [{\n          type: 'Product',\n          id: 'LIST'\n        }];\n      }\n    }),\n    getProductByUserId: builder.query({\n      query: id => `/product/${id}`,\n      transformResponse: responseData => {\n        const loadedPosts = responseData.map(product => {\n          product.id = product._id;\n          return product;\n        });\n        return productsAdapter.setAll(initialState, loadedPosts);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Product',\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: 'Product',\n            id\n          }))];\n        } else return [{\n          type: 'Product',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewProduct: builder.mutation({\n      query: initialProduct => ({\n        url: '/products/new',\n        method: 'POST',\n        body: {\n          ...initialProduct\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Product',\n        id: \"LIST\"\n      }]\n    }),\n    updateProduct: builder.mutation({\n      query: initialProduct => ({\n        url: `/products/${initialProduct.id}`,\n        method: 'PATCH',\n        body: {\n          ...initialProduct\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Product',\n        id: arg.id\n      }]\n    }),\n    deleteProduct: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/products/${id}`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Product',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetProductsQuery,\n  useGetCategoryProductsQuery,\n  useGetProductByUserIdQuery,\n  useAddNewProductMutation,\n  useUpdateProductMutation,\n  useDeleteProductMutation\n} = productsApiSlice;\n\n// returns the query result object\nexport const selectProductsResult = productsApiSlice.endpoints.getProducts.select();\n\n// creates memoized selector\nconst selectProductsData = createSelector(selectProductsResult, productsResult => productsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllProducts,\n  selectById: selectProductById,\n  selectIds: selectProductIds\n  // Pass in a selector that returns the products slice of state\n} = productsAdapter.getSelectors(state => {\n  var _selectProductsData;\n  return (_selectProductsData = selectProductsData(state)) !== null && _selectProductsData !== void 0 ? _selectProductsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","productsAdapter","initialState","getInitialState","productsApiSlice","injectEndpoints","endpoints","builder","getProducts","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedProducts","map","product","id","_id","setAll","providesTags","error","arg","ids","type","getCategoryProducts","category","getProductByUserId","loadedPosts","addNewProduct","mutation","initialProduct","url","method","body","invalidatesTags","updateProduct","deleteProduct","useGetProductsQuery","useGetCategoryProductsQuery","useGetProductByUserIdQuery","useAddNewProductMutation","useUpdateProductMutation","useDeleteProductMutation","selectProductsResult","select","selectProductsData","productsResult","data","selectAll","selectAllProducts","selectById","selectProductById","selectIds","selectProductIds","getSelectors","state","_selectProductsData"],"sources":["E:/Coding/WEB-DEV/Projects2/pupFind-mern/frontend/src/features/menu/productsApiSlice.js"],"sourcesContent":["import {\r\n    createSelector,\r\n    createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\nconst productsAdapter = createEntityAdapter({})\r\n\r\nconst initialState = productsAdapter.getInitialState()\r\n\r\nexport const productsApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getProducts: builder.query({\r\n            query: () => '/products',\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            transformResponse: responseData => {\r\n                const loadedProducts = responseData.map(product => {\r\n                    product.id = product._id\r\n                    return product\r\n                });\r\n                return productsAdapter.setAll(initialState, loadedProducts)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Product', id: 'LIST' },\r\n                        ...result.ids.map(id => ({ type: 'Product', id }))\r\n                    ]\r\n                } else return [{ type: 'Product', id: 'LIST' }]\r\n            }\r\n        }),\r\n        getCategoryProducts: builder.query({\r\n            query: category => `/products?category=${category}`,\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            transformResponse: responseData => {\r\n                const loadedProducts = responseData.map((product) => {\r\n                    product.id = product._id\r\n                    return product\r\n                });\r\n                return productsAdapter.setAll(initialState, loadedProducts)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Product', id: \"LIST\" },\r\n                        ...result.ids.map((id) => ({ type: 'Product', id }))\r\n                    ]\r\n                } else return [{ type: 'Product', id: 'LIST' }]\r\n            }\r\n        }),\r\n        getProductByUserId: builder.query({\r\n            query: id => `/product/${id}`,\r\n            transformResponse: responseData => {\r\n                const loadedPosts = responseData.map((product) => {\r\n                    product.id = product._id\r\n                    return product\r\n                });\r\n                return productsAdapter.setAll(initialState, loadedPosts)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Product', id: \"LIST\" },\r\n                        ...result.ids.map(id => ({ type: 'Product', id }))\r\n                    ]\r\n                } else return [{ type: 'Product', id: 'LIST' }]\r\n            }\r\n        }),\r\n        addNewProduct: builder.mutation({\r\n            query: initialProduct => ({\r\n                url: '/products/new',\r\n                method: 'POST',\r\n                body: {\r\n                    ...initialProduct,\r\n                }\r\n            }),\r\n            invalidatesTags: [\r\n                { type: 'Product', id: \"LIST\" }\r\n            ]\r\n        }),\r\n        updateProduct: builder.mutation({\r\n            query: initialProduct => ({\r\n                url: `/products/${initialProduct.id}`,\r\n                method: 'PATCH',\r\n                body: {\r\n                    ...initialProduct,\r\n                }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'Product', id: arg.id }\r\n            ]\r\n        }),\r\n        deleteProduct: builder.mutation({\r\n            query: ({ id }) => ({\r\n                url: `/products/${id}`,\r\n                method: 'DELETE',\r\n                body: { id }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'Product', id: arg.id }\r\n            ]\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useGetProductsQuery,\r\n    useGetCategoryProductsQuery,\r\n    useGetProductByUserIdQuery,\r\n    useAddNewProductMutation,\r\n    useUpdateProductMutation,\r\n    useDeleteProductMutation,\r\n} = productsApiSlice\r\n\r\n// returns the query result object\r\nexport const selectProductsResult = productsApiSlice.endpoints.getProducts.select()\r\n\r\n// creates memoized selector\r\nconst selectProductsData = createSelector(\r\n    selectProductsResult,\r\n    productsResult => productsResult.data // normalized state object with ids & entities\r\n)\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n    selectAll: selectAllProducts,\r\n    selectById: selectProductById,\r\n    selectIds: selectProductIds\r\n    // Pass in a selector that returns the products slice of state\r\n} = productsAdapter.getSelectors(state => selectProductsData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}